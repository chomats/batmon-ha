import unittest

from crcmod import crcmod

from bmslib.bms_ble.plugins.basebms import crc16_modbus2, crc16_xmodem2, crc_modbus

# Exemple d'utilisation :
hex_string = [
    "01 10 16 1E 00 01 02 00 00", "D2 2F",
    "01 10 16 20 00 01 02 00 00", "D6 F1",
    "02 10 16 1E 00 01 02 00 00", "C6 DF",
    "02 10 16 20 00 01 02 00 00", "C2 01",
    "03 10 16 20 00 01 02 00 00", "CF 91",
    "04 10 16 20 00 01 02 00 00", "E9 A1",
    "05 10 16 20 00 01 02 00 00", "E4 31",
    "06 10 16 20 00 01 02 00 00", "F0 C1",
    "07 10 16 20 00 01 02 00 00", "FD 51",
    "08 10 16 20 00 01 02 00 00", "BC A1",
    "09 10 16 20 00 01 02 00 00", "B1 31",
    "02 10 16 20 00 01 04 78"
    ],
trame_resp=[
    "55 AA EB 90 01 00 AC 0D 00 00 14 0A 00 00 BE 0A 00 00 42 0E 00 00 AC 0D 00 00 05 00 00 00 06 0E 00 00 8C 0A 00 00 10 0E 00 00 AC 0D 00 00 C4 09 00 00 F0 49 02 00 03 00 00 00 3C 00 00 00 F0 49 02 00 2C 01 00 00 3C 00 00 00 05 00 00 00 D0 07 00 00 BC 02 00 00 58 02 00 00 BC 02 00 00 58 02 00 00 14 00 00 00 46 00 00 00 20 03 00 00 BC 02 00 00 10 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 C0 45 04 00 DC 05 00 00 48 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 60 E3 16 00 11 32 3C 32 18 FE FF FF FF 9F E9 1D 02 00 00 00 00 F1 00 10 16 1E 00 01", "64 56",
    "55 AA EB 90 01 05 AC 0D 00 00 14 0A 00 00 BE 0A 00 00 42 0E 00 00 AC 0D 00 00 05 00 00 00 06 0E 00 00 8C 0A 00 00 10 0E 00 00 AC 0D 00 00 C4 09 00 00 F0 49 02 00 03 00 00 00 3C 00 00 00 F0 49 02 00 2C 01 00 00 3C 00 00 00 05 00 00 00 D0 07 00 00 BC 02 00 00 58 02 00 00 BC 02 00 00 58 02 00 00 14 00 00 00 46 00 00 00 20 03 00 00 BC 02 00 00 10 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 68 A7 04 00 DC 05 00 00 E4 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 60 E3 16 00 10 32 3C 32 18 FE FF FF FF 9F E9 1D 02 00 00 00 00 9C 02 10 16 1E 00 01", "65 B4",
    "55 AA EB 90 01 05 AC 0D 00 00 14 0A 00 00 BE 0A 00 00 42 0E 00 00 AC 0D 00 00 05 00 00 00 06 0E 00 00 8C 0A 00 00 10 0E 00 00 AC 0D 00 00 C4 09 00 00 F0 49 02 00 03 00 00 00 3C 00 00 00 F0 49 02 00 2C 01 00 00 3C 00 00 00 05 00 00 00 D0 07 00 00 BC 02 00 00 58 02 00 00 BC 02 00 00 58 02 00 00 38 FF FF FF 9C FF FF FF E8 03 00 00 20 03 00 00 10 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00 68 A7 04 00 DC 05 00 00 7A 0D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 60 E3 16 00 11 32 3C 32 18 FE FF FF FF 9F E9 1D 02 00 00 00 00 D4 01 10 16 1E 00 01", "65 87",
    "55 AA EB 90 02 00 F7 0C F7 0C F7 0C F6 0C F7 0C F7 0C F7 0C F7 0C F9 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00 F7 0C 03 00 07 02 3D 00 38 00 41 00 47 00 57 00 5B 00 64 00 69 00 7F 00 80 00 6B 00 5F 00 5F 00 52 00 49 00 3B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E5 00 00 00 00 00 77 CF 00 00 84 4B 00 00 6C 01 00 00 DB 00 DF 00 00 00 00 00 00 00 00 62 B5 34 04 00 C0 45 04 00 09 00 00 00 37 73 28 00 64 00 00 00 CD 30 B0 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 01 00 00 00 93 03 01 00 00 00 35 55 3F 40 00 00 00 00 BF 14 00 00 00 01 01 01 00 06 01 00 09 2A CA 04 00 00 00 00 E5 00 DB 00 DD 00 90 03 4C D3 85 0A 48 00 00 00 80 51 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 FE FF 7F DC 2F 01 01 B0 0F 07 00 00 61 00 10 16 20 00 01", "05 9A",
    "55 AA EB 90 02 00 F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F9 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00 F7 0C 02 00 05 00 3D 00 38 00 41 00 47 00 57 00 5B 00 64 00 69 00 7F 00 80 00 6B 00 5F 00 5F 00 52 00 49 00 3B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E5 00 00 00 00 00 76 CF 00 00 3D 97 00 00 D9 02 00 00 DB 00 DF 00 00 00 00 00 00 00 00 62 BA 34 04 00 C0 45 04 00 09 00 00 00 37 73 28 00 64 00 00 00 E6 30 B0 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 01 00 00 00 93 03 02 00 00 00 35 55 3F 40 00 00 00 00 BF 14 00 00 00 01 01 01 00 06 01 00 04 2B CA 04 00 00 00 00 E5 00 DB 00 DD 00 90 03 65 D3 85 0A 48 00 00 00 80 51 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 FE FF 7F DC 2F 01 01 B0 0F 07 00 00 03 00 10 16 20 00 01", "05 9A",
    "55 AA EB 90 02 00 F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F9 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00 F7 0C 03 00 04 02 3D 00 38 00 41 00 47 00 57 00 5B 00 64 00 69 00 7F 00 80 00 6B 00 5F 00 5F 00 52 00 49 00 3B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E5 00 00 00 00 00 76 CF 00 00 84 4B 00 00 6C 01 00 00 DB 00 DE 00 00 00 00 00 00 00 00 62 B5 34 04 00 C0 45 04 00 09 00 00 00 37 73 28 00 64 00 00 00 C9 30 B0 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 01 00 00 00 93 03 01 00 00 00 35 55 3F 40 00 00 00 00 BF 14 00 00 00 01 01 01 00 06 01 00 DF 29 CA 04 00 00 00 00 E5 00 DB 00 DD 00 90 03 48 D3 85 0A 48 00 00 00 80 51 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 FE FF 7F DC 2F 01 01 B0 0F 07 00 00 2A 00 10 16 20 00 01", "05 9A",
    "55 AA EB 90 02 00 F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F7 0C F9 0C F9 0C F7 0C F7 0C F9 0C F7 0C F7 0C F7 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF FF 00 00 F8 0C 02 00 08 00 3D 00 38 00 41 00 47 00 57 00 5B 00 64 00 69 00 7F 00 80 00 6B 00 5F 00 5F 00 52 00 49 00 3B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E5 00 00 00 00 00 7C CF 00 00 41 97 00 00 D9 02 00 00 DA 00 DF 00 00 00 00 00 00 00 00 62 BD 34 04 00 C0 45 04 00 09 00 00 00 37 73 28 00 64 00 00 00 F7 30 B0 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF 00 01 00 00 00 93 03 02 00 00 00 35 55 3F 40 00 00 00 00 BF 14 00 00 00 01 01 01 00 06 01 00 AB 2B CA 04 00 00 00 00 E5 00 DB 00 DD 00 90 03 76 D3 85 0A 48 00 00 00 80 51 01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 FE FF 7F DC 2F 01 01 B0 0F 07 00 00 E0 00 10 16 20 00 01", "05 9A",
]



def calc_crc16_modbus(data: bytes) -> int:
    """Calcule le CRC-16 Modbus d'une sÃ©quence d'octets."""
    crc = 0xFFFF
    for aByte in data:
        crc ^= aByte
        for _ in range(8):
            if crc & 0x0001:
                crc = (crc >> 1) ^ 0xA001
            else:
                crc >>= 1
    return crc

class TestJk02(unittest.TestCase):
    """ unit tests of jk02 protocol """
    maxDiff = None

    def test_crc16_modbus(self):
        for i in range(0, len(hex_string), 2):
            trame = hex_string[i]
            crc = hex_string[i + 1]
            print(f"Trame : {trame} | CRC : {crc}")
            frame = bytes.fromhex(trame)
            crc_computed = crc16_modbus2(frame)
            
            print(f"CRC = {crc_computed.hex(' ').upper()}")  # Doit afficher D6 F1
            assert crc == crc_computed.hex(' ').upper()

    def test_crc16_modbus_resp(self):
        crc16_xmodem = crcmod.mkCrcFun(0x11021, rev=False, initCrc=0x0000, xorOut=0x0000)

        for i in range(0, len(trame_resp), 2):
            trame = trame_resp[i]
            crc = trame_resp[i + 1]
            print(f"Trame : {trame} | CRC : {crc}")
            frame = bytearray(bytes.fromhex(trame.replace(" ","")))
            crc_computed = calc_crc16_modbus(frame)
            crc_computed2 = bytes([crc_computed & 0xff, (crc_computed >> 8) & 0xff])
            print(f"CRC = {crc_computed2.hex(' ').upper()}")  # Doit afficher D6 F1
            assert crc == crc_computed2.hex(' ').upper()        